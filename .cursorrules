# Sentio C++ Project Rules

## 1. Documentation Policy
- **MAINTAIN ONLY TWO DOCUMENTS**: `docs/architecture.md` and `docs/readme.md`
- **NO OTHER DOCUMENTS** allowed in `docs/` folder unless explicitly requested
- **MEGA-DOCS EXCEPTION**: Mega-documents stay in `megadocs/` folder and are not part of the document system
- **ARCHITECTURE DOCUMENT**: Must be comprehensive and cover all system components
- **README DOCUMENT**: Must provide quick start guide and essential usage information

## 2. Mega Document Creation
- **ALWAYS** use `tools/create_mega_document.py`
- **MUST** include all relevant source modules
- **MUST** include requested bug report or requirement document
- Auto-generate comprehensive documentation for AI model understanding
- **MEGA-DOCS LOCATION**: Store in `megadocs/` folder, not `docs/`

## 3. Task Review/Summary Standards
- **Concise and specific** reporting
- Focus on **core technology** details
- Emphasize **performance metrics**
- No verbose explanations unless critical

## 4. Profit Maximization Mandate
**PRIMARY GOAL: MAXIMIZE PROFIT**

Unless explicitly instructed otherwise:
- Optimize for **maximum monthly projected return rate**
- Optimize for **highest Sharpe score**
- Target **healthy daily trading range: 10-100 trades/day**
- Remove artificial constraints that limit capital deployment
- Let SOTA systems determine optimal sizing and allocation

## 5. Communication Standards
- **DO NOT** use `echo` command in chat discussions
- Focus on actionable results and performance improvements
- Prioritize implementation over explanation

## 6. Development Priorities
1. **Performance** over safety margins
2. **Capital efficiency** over conservative limits
3. **Profit optimization** over risk reduction
4. **SOTA theoretical foundations** over heuristics

## 7. Configuration Philosophy
- Remove artificial caps and restrictions
- Let utility-maximizing frameworks determine optimal allocation
- Bias towards aggressive profit-seeking parameters
- Only constrain when mathematically/theoretically justified

## 8. Code Development Standards
- **NO CODE DUPLICATION**: Never allow code duplication in any form, within modules or across modules
- **DIRECT MODIFICATION**: When improving a source module, directly work on the original source module
- **NO VERSION SUFFIXES**: Do not create v2, enhanced, better, faster, etc. versions
- **GIT VERSION CONTROL**: Use git system for version control, not file names
- **SINGLE SOURCE OF TRUTH**: Each module must have one authoritative implementation
- **BEFORE CREATING ANYTHING NEW**: Search & reuse existing symbols; propose merge/refactor if overlap exists
- **CHOOSE NARROWEST INTERFACE**: Select the narrowest interface that satisfies the use-case
- **PREFER EXTENSIBLE PATTERNS**: Use strategy/state/command patterns over conditionals
