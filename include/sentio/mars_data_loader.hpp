#pragma once

#include "sentio/core.hpp"
#include <string>
#include <vector>
#include <fstream>
#include <nlohmann/json.hpp>

namespace sentio {

/**
 * MarsDataLoader - Loads market data generated by MarS (Microsoft Research Market Simulation Engine)
 * 
 * This class provides integration between MarS-generated realistic market data
 * and our C++ virtual market testing system.
 */
class MarsDataLoader {
public:
    struct MarsBar {
        std::time_t timestamp;
        double open;
        double high;
        double low;
        double close;
        double volume;
        std::string symbol;
    };

    /**
     * Load market data from MarS-generated JSON file
     * 
     * @param filename Path to JSON file generated by MarS bridge
     * @return Vector of MarsBar objects
     */
    static std::vector<MarsBar> load_from_json(const std::string& filename);
    
    /**
     * Convert MarsBar to our standard Bar format
     * 
     * @param mars_bar MarS bar data
     * @return Standard Bar object
     */
    static Bar convert_to_bar(const MarsBar& mars_bar);
    
    /**
     * Convert vector of MarsBar to vector of Bar
     * 
     * @param mars_bars Vector of MarS bars
     * @return Vector of standard Bar objects
     */
    static std::vector<Bar> convert_to_bars(const std::vector<MarsBar>& mars_bars);
    
    /**
     * Generate MarS data using Python bridge
     * 
     * @param symbol Symbol to generate data for
     * @param duration_minutes Duration in minutes
     * @param bar_interval_seconds Bar interval in seconds
     * @param num_simulations Number of simulations
     * @param market_regime Market regime ("normal", "volatile", "trending", "bear")
     * @param output_file Output JSON file path
     * @return True if successful
     */
    static bool generate_mars_data(const std::string& symbol,
                                 int duration_minutes,
                                 int bar_interval_seconds,
                                 int num_simulations,
                                 const std::string& market_regime,
                                 const std::string& output_file);
    
    /**
     * Generate fast historical data using optimized bridge
     * 
     * @param symbol Symbol to generate data for
     * @param historical_data_file Path to historical CSV data
     * @param continuation_minutes Minutes to continue after historical data
     * @param output_file Output JSON file path
     * @return True if successful
     */
    static bool generate_fast_historical_data(const std::string& symbol,
                                            const std::string& historical_data_file,
                                            int continuation_minutes,
                                            const std::string& output_file);
    
    /**
     * Load and convert MarS data in one step
     * 
     * @param symbol Symbol to generate data for
     * @param duration_minutes Duration in minutes
     * @param bar_interval_seconds Bar interval in seconds
     * @param num_simulations Number of simulations
     * @param market_regime Market regime
     * @return Vector of standard Bar objects
     */
    static std::vector<Bar> load_mars_data(const std::string& symbol,
                                         int duration_minutes,
                                         int bar_interval_seconds,
                                         int num_simulations,
                                         const std::string& market_regime);

    /**
     * Load and convert fast historical data in one step
     * 
     * @param symbol Symbol to generate data for
     * @param historical_data_file Path to historical CSV data
     * @param continuation_minutes Minutes to continue after historical data
     * @return Vector of standard Bar objects
     */
    static std::vector<Bar> load_fast_historical_data(const std::string& symbol,
                                                     const std::string& historical_data_file,
                                                     int continuation_minutes);

private:
    /**
     * Execute Python command to generate MarS data
     * 
     * @param command Python command to execute
     * @return True if command executed successfully
     */
    static bool execute_python_command(const std::string& command);
};

} // namespace sentio
