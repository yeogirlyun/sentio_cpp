#include "sentio/run_id_generator.hpp"
#include <chrono>
#include <random>
#include <sstream>
#include <iomanip>

namespace sentio {

std::string generate_run_id() {
    // Use a combination of timestamp and random number for uniqueness
    auto now = std::chrono::steady_clock::now();
    auto timestamp = now.time_since_epoch().count();
    
    // Create a random number generator
    static std::random_device rd;
    static std::mt19937 gen(rd());
    std::uniform_int_distribution<int> dis(100000, 999999);
    
    // Generate a 6-digit number
    // Use last 3 digits of timestamp + 3 random digits for better distribution
    int timestamp_part = (timestamp % 1000);
    int random_part = dis(gen) % 1000;
    
    int run_id_num = timestamp_part * 1000 + random_part;
    
    // Ensure it's exactly 6 digits
    run_id_num = 100000 + (run_id_num % 900000);
    
    return std::to_string(run_id_num);
}

std::string create_audit_note(const std::string& strategy_name, 
                             const std::string& test_type, 
                             const std::string& period_info) {
    std::ostringstream note;
    note << "Strategy: " << strategy_name;
    note << ", Test: " << test_type;
    
    if (!period_info.empty()) {
        note << ", Period: " << period_info;
    }
    
    note << ", Generated by sentio_cli";
    
    return note.str();
}

} // namespace sentio
